// Code generated by ./gen. DO NOT EDIT.

package wrapper

import (
	"context"

	"xorm.io/xorm"
	"xorm.io/xorm/contexts"
)

type session struct {
	*xorm.Session
}

func (s *session) After(x0 func(any)) *Session {
	s.Session.After(x0)
	return &Session{s}
}

func (s *session) Alias(x0 string) *Session {
	s.Session.Alias(x0)
	return &Session{s}
}

func (s *session) AllCols() *Session {
	s.Session.AllCols()
	return &Session{s}
}

func (s *session) And(x0 any, x1 ...any) *Session {
	s.Session.And(x0, x1)
	return &Session{s}
}

func (s *session) Asc(x0 ...string) *Session {
	s.Session.Asc(x0)
	return &Session{s}
}

func (s *session) Before(x0 func(any)) *Session {
	s.Session.Before(x0)
	return &Session{s}
}

func (s *session) BufferSize(x0 int) *Session {
	s.Session.BufferSize(x0)
	return &Session{s}
}

func (s *session) Cascade(x0 ...bool) *Session {
	s.Session.Cascade(x0)
	return &Session{s}
}

func (s *session) Charset(x0 string) *Session {
	s.Session.Charset(x0)
	return &Session{s}
}

func (s *session) Cols(x0 ...string) *Session {
	s.Session.Cols(x0)
	return &Session{s}
}

func (s *session) Context(x0 context.Context) *Session {
	s.Session.Context(x0)
	return &Session{s}
}

func (s *session) ContextCache(x0 contexts.ContextCache) *Session {
	s.Session.ContextCache(x0)
	return &Session{s}
}

func (s *session) Decr(x0 string, x1 ...any) *Session {
	s.Session.Decr(x0, x1)
	return &Session{s}
}

func (s *session) Desc(x0 ...string) *Session {
	s.Session.Desc(x0)
	return &Session{s}
}

func (s *session) Distinct(x0 ...string) *Session {
	s.Session.Distinct(x0)
	return &Session{s}
}

func (s *session) ForUpdate() *Session {
	s.Session.ForUpdate()
	return &Session{s}
}

func (s *session) GroupBy(x0 string) *Session {
	s.Session.GroupBy(x0)
	return &Session{s}
}

func (s *session) Having(x0 string) *Session {
	s.Session.Having(x0)
	return &Session{s}
}

func (s *session) ID(x0 any) *Session {
	s.Session.ID(x0)
	return &Session{s}
}

func (s *session) In(x0 string, x1 ...any) *Session {
	s.Session.In(x0, x1)
	return &Session{s}
}

func (s *session) Incr(x0 string, x1 ...any) *Session {
	s.Session.Incr(x0, x1)
	return &Session{s}
}

func (s *session) IndexHint(x0 string, x1 string, x2 string) *Session {
	s.Session.IndexHint(x0, x1, x2)
	return &Session{s}
}

func (s *session) Join(x0 string, x1 any, x2 any, x3 ...any) *Session {
	s.Session.Join(x0, x1, x2, x3)
	return &Session{s}
}

func (s *session) Limit(x0 int, x1 ...int) *Session {
	s.Session.Limit(x0, x1)
	return &Session{s}
}

func (s *session) MustCols(x0 ...string) *Session {
	s.Session.MustCols(x0)
	return &Session{s}
}

func (s *session) MustLogSQL(x0 ...bool) *Session {
	s.Session.MustLogSQL(x0)
	return &Session{s}
}

func (s *session) NoAutoCondition(x0 ...bool) *Session {
	s.Session.NoAutoCondition(x0)
	return &Session{s}
}

func (s *session) NoAutoTime() *Session {
	s.Session.NoAutoTime()
	return &Session{s}
}

func (s *session) NoCache() *Session {
	s.Session.NoCache()
	return &Session{s}
}

func (s *session) NoCascade() *Session {
	s.Session.NoCascade()
	return &Session{s}
}

func (s *session) NoVersionCheck() *Session {
	s.Session.NoVersionCheck()
	return &Session{s}
}

func (s *session) NotIn(x0 string, x1 ...any) *Session {
	s.Session.NotIn(x0, x1)
	return &Session{s}
}

func (s *session) Nullable(x0 ...string) *Session {
	s.Session.Nullable(x0)
	return &Session{s}
}

func (s *session) Omit(x0 ...string) *Session {
	s.Session.Omit(x0)
	return &Session{s}
}

func (s *session) Or(x0 any, x1 ...any) *Session {
	s.Session.Or(x0, x1)
	return &Session{s}
}

func (s *session) OrderBy(x0 any, x1 ...any) *Session {
	s.Session.OrderBy(x0, x1)
	return &Session{s}
}

func (s *session) Prepare() *Session {
	s.Session.Prepare()
	return &Session{s}
}

func (s *session) SQL(x0 any, x1 ...any) *Session {
	s.Session.SQL(x0, x1)
	return &Session{s}
}

func (s *session) Select(x0 string) *Session {
	s.Session.Select(x0)
	return &Session{s}
}

func (s *session) SetExpr(x0 string, x1 any) *Session {
	s.Session.SetExpr(x0, x1)
	return &Session{s}
}

func (s *session) StoreEngine(x0 string) *Session {
	s.Session.StoreEngine(x0)
	return &Session{s}
}

func (s *session) Table(x0 any) *Session {
	s.Session.Table(x0)
	return &Session{s}
}

func (s *session) Unscoped() *Session {
	s.Session.Unscoped()
	return &Session{s}
}

func (s *session) UseBool(x0 ...string) *Session {
	s.Session.UseBool(x0)
	return &Session{s}
}

func (s *session) Where(x0 any, x1 ...any) *Session {
	s.Session.Where(x0, x1)
	return &Session{s}
}
